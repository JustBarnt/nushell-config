rm -rf Roaming\nushell\history.txt
git pull 
git stash pop
git stash clear
git st
git restore --staged Roaming\nushell\history.txt
git rm --staged Roaming\nushell\history.txt
clear
git st
git add Roaming\nushell\history.txt
git st
git add .
git cm 'updates'
gi tpush
git push
git st
clear
git rm --cached Roaming\nushell\history.txt
git st
git add .; git cm 'chore'
gi tpush
git push
git st
clear
ls
git add . Local\Microsoft\PowerToys\settings.json -f
clear
git st
git add Local\Microsoft\PowerToys\settings.json -f
git st
git add `Local\Microsoft\PowerToys\PowerToys Run\settings.json` `Local\Microsoft\PowerToys\PowerToys Run\Plugins\**`
git add `Local\Microsoft\PowerToys\PowerToys Run\settings.json` `Local\Microsoft\PowerToys\PowerToys Run\Plugins\**` -f
git st
git cm 'feat: save powertoys settings'
git push
cd ~
git st
git submodule update AppData\
git submodule sync AppData\
git submodule --help
git submodule AppData\ update
git submodule update --remote AppData
git submodule update --remote AppData\
cd AppData\
git st
git switch HEAD
git switch main
git st
git log
clear
cd ~
git submodule update --remote --recursive
git submodule update --remote AppData\
git submodule update --remote --merge
vim .gitmodules
git submodule
git submodule -h
git submodule set-branch main AppData\
git submodule set-branch --branch main AppData\
vim .gitmodules
git submodule update --remote --merge
git st
git submodule update --remote --merge --recursive
git st
git submodule update --remote --merge AppData
git st
git add .gitmodules; git cm 'update gitmodules'
git push
clear
git st
cd AppData\
git st
git branch -vv
git checkout main
cd ~
git submodule update --checkout -branch main AppData\
git submodule update --checkout main AppData\
git submodule update --checkout main 
git submodule update --checkout AppData\
cd appdata
git st
git checkout main
clear
cd ~
ls
clear
git st
git submodule update --remote --merge
git st
git add .
git st
cd .neorg\
git st
git add .; git cm 'scratchpad'
git push
cd ..
ls
clear
git st
git submodule update --remote --merge
git st
git add .; git cm 'updates'
git push
exit
cd nvim
vim .
git add .; git cm 'markview updates'
git push
exit
vim .
cd nvim
vim .
vim .
clear
vim .
im .
clear
vim .
clear
vim .
vim .
git st
git add .; git cm 'updated: disables, markview'
git push
clear
cdi
cd ~
ls
ls .config\
vim .config\starship.toml
exit
cd nvim
vim .
vim .
git add .; git cm 'disabled showing language in code fence'
git push
exit
cd xmlapi
ls
clear
rg LicensePlateEntry
rg --type=xML LicensePlateEntry
rg --type=xml LicensePlateEntry
vim Metadata\MI_LEIN.xml
vim Metadata\OH_LEADS.xml
rg --type=xml SON
cd xmlapi
cd metadata
clear
rg WMPISexOffender
rg WMPISexOffender OH_LEADS.xml
rg OH_LEADS.xml WMPISexOffenderQuery
vim OH_LEADS.xml
exit
cd stateforms
vim OH.xml
exit
exi
exit
rg --type=xml SOQ
rg --type=xml ImageIndicator
cd proj-125
ls
cd transactions\
ls
open transactions.md | split columns "```"
open transactions.md | split column "```"
open transactions.md | split column "#"
clear
open transactions.md
exit
clear
sort
sort -h
vim .
clear
cd nvim
vim .
git st
rm -rf lua\plugins\lang\markdown.lua
clear
vim .
ls
clear
git st
vim .
git add .; git cm 'updates and lazyextras'
git push
clear
cd proj-125
clear
cd transactions\
ls
open combinations.md | split column "---"
jclear
clear
split -h
open combinations.md | split row "---"
open combinations.md | split row "---" | split column "\n"
open combinations.md | split row "---" | sort -i
clear
open combinations.md | split column 
open combinations.md | split column "\n"
open combinations.md | split column "---"
open combinations.md | split row "---"
open combinations.md | split row "---" | $in.0
open combinations.md | split row "---" | $in.0 | split column "\n"
open combinations.md | split row "---" | $in.0 | split row "\n"
split -h
split
open combinations.md | split row "---" | $in.0 | split row "\n" | sort -i
open combinations.md | split row "---" | $in.0 | split row "\n" | each {|row| sort -i}
open combinations.md | split row "---" | $in.0 | split row "\n" | each {|row| sort }
open combinations.md | split row "---" | $in.0 | split row "\n" | each {|row| $row}
open combinations.md | split row "---" | $in.0 | split row "\n" | sort -i -r
open combinations.md | split row "---" | $in.0 | split row "\n" | split row "(In/Out)"
open combinations.md | split row "---" | $in.0 | split row "\n" | split row "(In/Out) "
open combinations.md | split row "---" | $in.0 | split row "\n" | split row "(In/Out) "| sort -i
open combinations.md | split row "---" | $in.0 | split row "\n" | split row "(In/Out) "| get values 
open combinations.md | split row "---" | $in.0 | split row "\n" | split row "(In/Out) "| get value
open combinations.md | split row "---" | $in.0 | split row "\n" | split row "(In/Out) "| get values
open combinations.md | split row "---" | $in.0 | split row "\n" | split row "(In/Out) "| select values
open combinations.md | split row "---" | $in.0 | split row "\n" | split row "(In/Out) "
help split
clear
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) "
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | each {$in.2 | sort -i}
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | each {$in.1 | sort -i}
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | each {$in.column2 | sort -i}
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | each {$in.column1 | sort -i}
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | drop column1 
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | drop 0
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | drop 1
drop
drop -h
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column0
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject 
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | each {|row| $row.value | sort}
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | each {|row| $row.column2 | sort}
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | each {|row| $row.0 | sort}
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | each {|row| $row['column2'] | sort}
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | each {|row| $row['column2'] }
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | each {|row| $row }
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | each {|row| $row.column2 }
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | each {$in.column2}
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | sort
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | $in.o
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | $in.0
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | $in.1
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | each {$in.value}
for -h
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | for value in $in {sort -i}
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | $in.0 | sort
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | $in.0 | sort -i
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | $in.0.value | sort -i
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | $in.0 | get values 
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | $in.0 | get value
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | $in.0 | get 
get -h
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | $in.0 | select
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | select
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | select $in.column2.o
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | select $in.column2.0
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | select $in.0
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | get $in.0
get -h
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | get column2.0
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | get $in.column2.0
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1
get -h
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | get column2
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | get column1
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | get column2
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | get column2.0
open combinations.md | split row "---" | $in.0 | split row "\n" | split column "(In/Out) " | reject column1 | get column2.1
clear
open combinations.md | split row "---" 
open combinations.md | split row "---" | get 0
open combinations.md | split row "---" | get 0 | sort 
clear
open combinations.md | split row "---" 
open combinations.md | split row "---" | get 0 | lines 
open combinations.md | split row "---" | get 0 | lines | each {|line| echo $line}
open combinations.md | split row "---" | get 0 | lines | each {|line| echo $line | split words | sort | str join " " }
open combinations.md | split row "---" | get 0 | lines 
cd $nu.config-path
split -h
open combinations.md | split "---"
help str
str replace -h
clear
str -h
str replace -h
source $nu.config-path
clear
source $nu.config-path
clear
open combinations.md | sort-combinations 
open combinations.md | sort-combinations $in
open combinations.md | sort-combinations $in "---"
sort-combinations combinations.md ---
sort-combinations combinations.md '---'
open filename.txt | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let pre = $line | str find-replace -r ".*?\)" ""<\n>        let sorted = ($pre | split chars | sort | str join "")<\n>        let prefix = $line | str substring 0 ($line | str index-of ")")<\n>        echo "$prefix) $sorted"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open combinations.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let pre = $line | str find-replace -r ".*?\)" ""<\n>        let sorted = ($pre | split chars | sort | str join "")<\n>        let prefix = $line | str substring 0 ($line | str index-of ")")<\n>        echo "$prefix) $sorted"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open combinations.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let pre = $line | str replace -r ".*?\)" ""<\n>        let sorted = ($pre | split chars | sort | str join "")<\n>        let prefix = $line | str substring 0 ($line | str index-of ")")<\n>        echo "$prefix) $sorted"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open filename.txt | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0 ($index + 1)<\n>        let rest = $line | str substring ($index + 1)<\n>        let sorted = ($rest | split chars | sort | str join "")<\n>        echo "$prefix$sorted"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open combinations.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0 ($index + 1)<\n>        let rest = $line | str substring ($index + 1)<\n>        let sorted = ($rest | split chars | sort | str join "")<\n>        echo "$prefix$sorted"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
clear
str substring 
str substring -h
clear
open combinations.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | split chars | sort | str join "")<\n>        echo "$prefix$sorted"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open combinations.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | split chars | sort | str join "")<\n>        echo "($prefix)($sorted)"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open combinations.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | split chars | sort | str join "")<\n>        echo "$($prefix)$($sorted)"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open combinations.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | split chars | sort | str join "")<\n>        echo $"($prefix)($sorted)"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open combinations.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | split words | sort | str join "")<\n>        echo $"($prefix)($sorted)"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open combinations.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | split chars | sort | str join ",")<\n>        echo $"($prefix)($sorted)"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open combinations.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | split words | sort | str join ",")<\n>        echo $"($prefix)($sorted)"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open combinations.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | split words | sort | str join ", ")<\n>        echo $"($prefix)($sorted)"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
exit
open filename.txt | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | split "," | each { |item| $item | str trim } | sort | str join ", ")<\n>        echo $"($prefix)$sorted"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open filename.txt | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | str replace "," "\n" | each { |item| $item | str trim } | sort | str join ", ")<\n>        echo $"($prefix)$sorted"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open combinations.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | str replace "," "\n" | each { |item| $item | str trim } | sort | str join ", ")<\n>        echo $"($prefix)$sorted"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open combinations.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | str replace "," "\n" | each { |item| $item | str trim } | sort | str join ", ")<\n>        echo $"($prefix)($sorted)"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open test.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | str replace "," "\n" | each { |item| $item | str trim } | sort | str join ", ")<\n>        echo $"($prefix)($sorted)"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
str -h
"hi there, dude" | string split ","
"hi there, dude" | str split ","
open test.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | split words | each { |item| $item | str trim } | sort | str join ", ")<\n>        echo $"($prefix)($sorted)"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open test.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | split row "[" | each { |item| $item | str trim } | sort | str join ", ")<\n>        echo $"($prefix)($sorted)"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open test.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | split row "[" | each { |item| $item | str trim } <\n>    }<\n>} 
open test.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | split row "[" | each { |item| $item | str trim })<\n>    }<\n>} 
open test.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let sorted = ($rest | str replace ", " "\n" | each { |item| $item | str trim })<\n>    }<\n>} 
clear
source $nu.config-path
open test.md | sort-combinations 
open test.md | sort-combinations $in
open test.md
source $nu.config-path
open test.md | sort-combinations $in
vim test.md
open test.md | sort-combinations $in
source $nu.config-path
open test.md | sort-combinations $in
sort-combinations test.md
source $nu.config-path
sort-combinations test.md
open test.md | sort-combinations $in
open test.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>      let index = $line | str index-of ")"<\n>      let prefix = $line | str substring 0..($index + 1)<\n>      let rest = $line | str substring ($index + 1)..-1<\n>      let sorted = ($rest | str replace ", " "\n" | each { |item| $item })<\n>      echo $"$(sorted)"<\n>    }<\n>  }
open test.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let items = ($rest | str trim | str replace ", " "\n" | each { |item| $item | str trim } | sort | str join ", ")<\n>        echo $"($prefix) $items"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open test.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n>        let items = ($rest | str trim | str replace ", " "\n" | each { |item| $item | str trim } | sort | str join ", ")<\n>        echo $"($prefix)($items)"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
clear
open test.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n><\n>        # Split the items manually by comma and sort them<\n>        let sorted_items = (<\n>            $rest | <\n>            str trim |<\n>            str replace ", " "\n" | <\n>            each { |item| $item | str trim } | <\n>            sort |<\n>            str join ", "<\n>        )<\n>        echo $"($prefix) $sorted_items"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
open test.md | split row "---" | each { |block|<\n>    $block | lines | each { |line|<\n>        let index = $line | str index-of ")"<\n>        let prefix = $line | str substring 0..($index + 1)<\n>        let rest = $line | str substring ($index + 1)..-1<\n><\n>        # Split the items manually by comma and sort them<\n>        let sorted_items = (<\n>            $rest | <\n>            str trim |<\n>            str replace ", " "\n" | <\n>            each { |item| $item | str trim } | <\n>            sort |<\n>            str join ", "<\n>        )<\n>        echo $"($prefix)($sorted_items)"<\n>    } | str join "\n"<\n>} | str join "\n---\n"
cd ~\.neorg\
ls
vim scratchPad.md
clear
source $nu.config-path
cd ..
ls
ls .pendulum\
rm -f .pendulum\time_log.csv
cd nvim
core-vim .
clear
ls
ls .pendulum\
vim .
rm -rf .pendulum\
clear
vim .
clear
vim .
mkdir .pendulum
cd .pendulum\
touch time-log.csv
ls
clear
ls
rm -f time-log.csv
ls
clear
cd ..\.neorg\
git st
git add .; git cm 'updates'
gi tpush
git push
git config --global edit
git config --global --edit
git config --global credential.https://github.com.justbarnt JustBarnt
clear
exit
source $nu.config-path
sort combinations scratchPad.md
sort combinations scratchPad.md "---"
clear
exit
nu
clear
timeit {<\n>let randoms = (1..50_000 | each {random int})<\n>}
clear
source
source $nu.config-path
clear
source $nu.config-path
sort combinations scratchPad.md "---"
clear
source $nu.config-path
clear
sort combinations scratchPad.md "---"
clear
sort combinations scratchPad.md "---"
sort combinations scratchPad.md "---" | get stream
clear
source $nu.config-path
sort combinations rebuild -h
clear
source $nu.config-path
sort combinations rebuild -h
"test, there, dude" | lines
"test, there, dude" | lines | split ","
"test, there, dude" | lines | split column ","
"test, there, dude" | lines | split column "," | sort
"test, there, dude" | lines | split column "," | get 0
"test, there, dude" | lines | split column "," | get 0 | sort
"test, there, dude" | str index-of "," 
"test, there, dude" | str index-of -a "," 
clear
cd clips application
cdi clips
cd application
rg --type=php "The user `\w+` failed to log on due to an invalid username or password"
rg --type=php "The user `\\w+` failed to log on due to an invalid username or password"
rg --type=php -r "The user `\w+` failed to log on due to an invalid username or password"
rg -help
rg --type=php -r --regex="The user `\w+` failed to log on due to an invalid username or password"
rg --type=php -r --regex="The user `.*` failed to log on due to an invalid username or password"
clear
vim .
cd 501 application
clear
vi m.
cd clips clips
cd application
vim .
exit
vim .
clear
open scratchPad.md
sort combinations scratchPad.md "---"
open scratchPad.md | lines | split row "---"
open scratchPad.md | lines | split row "---" | compact --empty
open scratchPad.md | lines | split list "---"
source $nu.config-path
sort combinations scratchPad.md "---"
help --find every
sort combinations scratchPad.md "---"
clear
source $nu.config-path
sort combinations scratchPad.md "---"
help --find is 
help --find is list
help --find is-type
help --find type
describe -h
source $nu.config-path
sort combinations scratchPad.md "---"
source $nu.config-path
sort combinations scratchPad.md "---"
sort combinations scratchPad.md "---" | describe 
source $nu.config-path
sort combinations scratchPad.md "---" | describe 
source $nu.config-path
sort combinations -h
sort combinations stats -h
sort combinations rebuild -h
clear
source $nu.config-path
clear
source $nu.config-path
sort combinations scratchPad.md "---" | describe 
sort combinations scratchPad.md "---"
str index-of -h
'hi' | str index-of "q"
vim scratchPad.md
clear
sort combinations scratchPad.md "---"
source $nu.config-path
sort combinations scratchPad.md "---"
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring 7..-2
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring 7..2
str substring -h 
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring 7..2
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring 7..4
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring 7..7
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring 7..14
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring 7..4
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring 4..7
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring 7..-4
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring 7..-14
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring 7..-16
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring -14..7
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-14..7)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-7..7)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-1..7)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (0..7)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-7..20)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-7..2000000)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-7..2000)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-7..200)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-7..20)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-7..48)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-7..47)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-7..46)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-7..30)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-7..35)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-7..41)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-7..39)
"(In/Out) Apartment, CardboardBo, House, Mansion" | str substring (-7..40)
"test, there" | str index-of ", "
help str
clear
str index-of -
str index-of -h
"test, there, person, " | str index-of -e ", "
clear
source $nu.config-path
clear
source
source $nu.config-path
sort combinations scratchPad.md "---"
clear
source $nu.config-path
sort combinations scratchPad.md "---"
source $nu.config-path
sort combinations scratchPad.md "---"
clear
source $nu.config-path
cd clips clips 
clear
cd clips clips
source $nu.config-path
exit
cd clips clips
cd application
vim l.
cd 501 application
vim .
eixt
exit
def test [num: int] {<\n>let num2 = num xor 4<\n>return $num2<\n>}
test 
def test [num?: int] {<\n>let num2 = num xor 4<\n>return $num2<\n>}
def test [num: int] {<\n>let num2 = num xor 4<\n>return $num2<\n>}
def test [num?: int] {<\n>let num2 = num xor 4<\n>return $num2<\n>}
clear
test
def test [num?: int] {<\n>let num2 = 4 xor num<\n>return $num2<\n>}
def test [num?: int] {<\n>let num2 = 4 bit-xor num<\n>return $num2<\n>}
def test [num?: int] {<\n>let num2 = num or 4<\n>return $num2<\n>}
test
help --find null
help --find "null"
clear
source $nu.config-path
"test, there, person, " | str index-of "["
"test, there, person, " | str index-of "[" | ternary {$in >= 0} str inde 
"test, there, person, " | str index-of "[" | ternary {$in >= 0} str index-of -e "," $in
"test, there, person, " | str index-of "[" | ternary {$in >= 0} {str index-of -e ","} $in
"test, there, person, " | str index-of "[" | ternary {$in >= 0} {str index-of -e ","} {$in}
"test, there, person, " | str index-of "[" | ternary ($in >= 0) {str index-of -e ","} {$in}
source $nu.config-path
"test, there, person, " | str index-of "[" | ternary ($in >= 0) {str index-of -e ","} {$in}
source $nu.config-path
help do
clear
"test, there, person, " | str index-of "[" | ternary {($in >= 0)} {str index-of -e ","} {$in}
"test, there, person, " | str index-of "[" | $in
ternary {"test, " | str index-of "[" >= 0} {"test, " | str index-of "["} {"test, " | str index-of ","}
ternary {("test, " | str index-of "[") >= 0} {"test, " | str index-of "["} {"test, " | str index-of ","}
ternary {("test, " | str index-of "[") >= 0} "test, " | str index-of "[" "test, " | str index-of ","
ternary {("test, " | str index-of "[") >= 0} ("test, " | str index-of "[") ("test, " | str index-of ",")
ternary {("test, [abc]" | str index-of "[") >= 0} ("test, " | str index-of "[") ("test, " | str index-of ",")
ternary {("test, [abc]" | str index-of "[") >= 0} ("test, [abs]" | str index-of "[") ("test, " | str index-of ",")
clear
source $nu.config-path
ternary closure {("test, [abc]" | str index-of "[") >= 0} ("test, [abs]" | str index-of "[") ("test, " | str index-of ",")
source $nu.config-path
clear
source $nu.config-path
"test, there, person, " | str index-of "[" | ternary boolean ($in > 0) "true" "false"
source $nu.config-path
"test, there, person, " | str index-of "[" | ternary boolean ($in > 0) "true" "false"
"test, there, person, " | str index-of -e "," | ternary boolean ($in > 0) "true" "false"
source $nu.config-path
"test, help, hi, [bye]" | str inde | ternary boolean ($in | str index-of "[" >= 0) ($in | str index-of "[") ($in | str index-of ",")
"test, help, hi, [bye]" | str index-of "[" | ternary boolean ($in | str index-of "[" >= 0) ($in | str index-of "[") ($in | str index-of ",")
"test, help, hi, [bye]" | str index-of "[" | ternary boolean (($in | str index-of "[") >= 0) ($in | str index-of "[") ($in | str index-of ",")
"test, help, hi, [bye]" | str index-of "[" | ternary boolean ($in >= 0) ($in | str index-of "[") ($in | str index-of ",")
"test, help, hi, [bye]" | str index-of "[" | ternary boolean ($in >= 0) ($in) ("test, help, hi, [bye]" | str index-of -e ",")
clear
source $nu.config-path
sort combinations scratchPad.md "---"
clear
sort combinations scratchPad.md "---"
clear
source $nu.config-path
sort combinations scratchPad.md "---"
clear
source $nu.config-path
sort combinations scratchPad.md "---"
cd .neorg\
ls
cd ..
ls
source $nu.config-path
sort combinations scratchPad.md "---"
source $nu.config-path
sort combinations scratchPad.md "---"
clear
source $nu.config-path
help length
"" | length
"" | str length
source $nu.config-path
sort combinations scratchPad.md "---"
"" | str length | $in
"" | str length | $in > 0
"" | str length | describe 
"test, test, test" | str length
"test, test, test" | str length | $in > 0
clear
source $nu.config-path
sort combinations scratchPad.md "---"
source $nu.config-path
sort combinations scratchPad.md "---"
clear
source $nu.config-path
sort combinations scratchPad.md "---"
source $nu.config-path
sort combinations scratchPad.md "---"
source $nu.config-path
sort combinations scratchPad.md "---"
source $nu.config-path
sort combinations scratchPad.md "---"
clear
source $nu.config-path
sort combinations scratchPad.md "---"
clear
source $nu.config-path
sort combinations scratchPad.md "---"
source $nu.config-path
sort combinations scratchPad.md "---"
source $nu.config-path
sort combinations scratchPad.md "---"
sort combinations scratchPad.md "---" | stream.0.entry
sort combinations scratchPad.md "---" | get stream | get 0 | get entry
sort combinations scratchPad.md "---" | get stream | get 0
sort combinations scratchPad.md "---" | get stream | get OPT
clear
source $nu.config-path
sort combinations scratchPad.md "---" | get stream | get OPT
sort combinations scratchPad.md "---" 
sort combinations scratchPad.md "---" | get stream | get 0
sort combinations scratchPad.md "---" | get stream | get 0 | values
sort combinations scratchPad.md "---" | get stream | get 0 | value
sort combinations scratchPad.md "---" | get stream | get 12 
sort combinations scratchPad.md "---" | get stream | get 12 | get length
sort combinations scratchPad.md "---" | get stream | get 12 | value length
sort combinations scratchPad.md "---" | get stream | get 12 | values
sort combinations scratchPad.md "---" | get stream | get 12.entry
sort combinations scratchPad.md "---" | get stream | get 12["entry"]
clear
source $nu.config-path
sort combinations scratchPad.md "---" | get stream
sort combinations scratchPad.md "---" | get stream | get 12
sort combinations scratchPad.md "---" | get stream | get 12 | get entry
sort combinations scratchPad.md "---" | get stream | get 12 | get entry | length
sort combinations scratchPad.md "---" | get stream | get 12 | get entry | compact --empty
sort combinations scratchPad.md "---" | get stream | compact --empty
sort combinations scratchPad.md "---" | get stream | get entry | compact --empty
sort combinations scratchPad.md "---" | get stream | every 1 | compact --empty
clear
sort combinations scratchPad.md "---" | get stream
sort combinations scratchPad.md "---" | get stream | get entry | describe 
clear
source $nu.config-path
sort combinations scratchPad.md "---" | get stream | get entry | describe 
sort combinations scratchPad.md "---" 
sort combinations scratchPad.md "---" | get stream
sort combinations scratchPad.md "---" | get stream | every 1 | describe 
sort combinations scratchPad.md "---" | get stream | every 1 | compact --empty
sort combinations scratchPad.md "---" | get stream | every 1 | every 1
sort combinations scratchPad.md "---" | get stream | every 1 | get 0
sort combinations scratchPad.md "---" | get stream 
sort combinations scratchPad.md "---" | every 1
clear
ternary boolean ("test" | str index-of "q") true false
ternary closure  {"test" | str index-of "q"} true false
ternary boolean ("test" | str index-of "q" | $in >= 0) true false
ternary boolean ("test" | str index-of "t" | $in >= 0) true false
clear
source $nu.config-path
sort combinations scratchPad.md "---" | every 1
vim scratchPad.md
clear
source $nu.config-path
sort combinations scratchPad.md "---" | every 1
clear
source $nu.config-path
sort combinations scratchPad.md "---" | every 1
source $nu.config-path
sort combinations scratchPad.md "---" | every 1
clear
source $nu.config-path
sort combinations scratchPad.md "---" | every 1
clear
source $nu.config-path
sort combinations scratchPad.md "---" | every 1
sort combinations scratchPad.md "---"
source $nu.config-path
sort combinations scratchPad.md "---"
source $nu.config-path
sort combinations scratchPad.md "---"
clear
sout
source $nu.config-path
sort combinations scratchPad.md "---"
help --find insert
insert -h
clear
source $nu.config-path
sourv
source $nu.config-path
clear
sort combinations scratchPad.md "---" 
sort combinations scratchPad.md "---" | each {$in}
sort combinations scratchPad.md "---" | each {|item| return $item}
sort combinations scratchPad.md "---" | each {|item| return $item.0}
clear
sort combinations scratchPad.md "---" | every 1
sort combinations scratchPad.md "---" | every 1 | $in.stream
sort combinations scratchPad.md "---" | get stream
clear
source
source $nu.config-path
help --find append
append -h
add -h
sort combinations scratchPad.md "---" 
sort combinations scratchPad.md "---" | get $in.obj.lines
sort combinations scratchPad.md "---"
sort combinations scratchPad.md "---" | get stream
sort combinations scratchPad.md "---" | get obj | each {|line|<\n>sort combinations scratchPad.md "---"| get stream | append $line "test"}<\n>
sort combinations scratchPad.md "---" | get obj | each {|line|<\n>sort combinations scratchPad.md "---"| get stream | append $line}<\n>
sort combinations scratchPad.md "---" | get obj.lines | each {|line|<\n>sort combinations scratchPad.md "---"| get stream | append $line}<\n>
sort combinations scratchPad.md "---" | get obj.lines | each {|line|<\n>sort combinations scratchPad.md "---"| get stream | append [$line]}<\n>
clear
append h-
append -h
help --find add
help --find concatente
help --find concatate
help --find concat
sort combinations scratchPad.md "---" | get obj.lines | each {|line|<\n>sort combinations scratchPad.md "---"| get stream | $in[$line] = [$line]}<\n>
sort combinations scratchPad.md "---" | get obj.lines | each {|line|<\n>sort combinations scratchPad.md "---"| get stream | { $in[$line] = [$line]}}<\n>
clear
help --find insert
insert -h
sort combinations scratchPad.md "---" | get obj.lines | each {|line|<\n>sort combinations scratchPad.md "---"| get stream | insert $line "test"}<\n>
sort combinations scratchPad.md "---" | get obj.lines | each {|line|<\n>| get stream | insert $line "test"}<\n>
sort combinations scratchPad.md "---" | $in.lines | each {|line|<\n>| get stream | insert $line "test"}<\n>
clear
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild 
sort combinations scratchPad.md "---" | sort combinations rebuild $in
clear
insert -h
clear
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
cl;ear
clear
source $nu.config-path
clear
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
source $nu.config-path
clear
insert -h
clear
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
insert -
insert -h
append -h
clear
exit
cd nvim
vim .
clear
cd .neorg\
clear
ls
cd ..
ls
sort combinations scratchPad.md "---" | sort combinations rebuild $in
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
clear
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
append -h
insert -h
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
source $nu.config-path
sort
sort combinations scratchPad.md "---" | sort combinations rebuild $in
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
source $nu.config-path
clear
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
source $nu.config-path
sort combinations scratchPad.md "---" | sort combinations rebuild $in
clear
source $nu.config-path
sort combinations scratchPad.md "---" 
clear
source $nu.config-path
sort combinations scratchPad.md "---" 
source $nu.config-path
sort combinations scratchPad.md "---" 
clear
source $nu.config-path
open scratchPad.md | lines 
help --find str
help str
str starts-with -h
clear
str starts-with -h
clar
clear
str starts-with -h
source $nu.config-path
cd .neorg
ls
sort combinations scratchPad.md "---" 
source $nu.config-path
sort combinations scratchPad.md "---" 
source $nu.config-path
clear
sort combinations scratchPad.md "---" 
clear
source $nu.config-path
sort combinations scratchPad.md "---" 
source $nu.config-path
sort combinations scratchPad.md "---" 
clear
source $nu.config-path
sort combinations scratchPad.md "---" 
sort combinations scratchPad.md "---" | every 1 | describe 
sort combinations scratchPad.md "---" | str starts-with "-"
clear
open $filename | decode utf-8 | lines | each { |row|<\n>    print $row }
open scratchPad.md | decode utf-8 | lines | each { |row|<\n>    print $row }
open scratchPad.md | decode utf-8 | lines | each { |row| print $row | describe  }
open scratchPad.md | decode utf-8 | lines | each { |row| $row | describe  }
open scratchPad.md | decode utf-8 | lines | each { |row| $row | str starts-with "-"}
open scratchPad.md | decode utf-8 | lines | each { |row| $row | str starts-with ""}
open scratchPad.md | decode utf-8 | lines | each { |row| $row | str starts-with "\n"}
open scratchPad.md | decode utf-8 | lines | each { |row| $row | str starts-with "-"}
open scratchPad.md | decode utf-8 | lines | each { |row| $row | str starts-with " "}
open scratchPad.md | decode utf-8 | lines | each { |row| $row | str starts-with ""}
open scratchPad.md | decode utf-8 | lines | each { |row| $row | str starts-with " \n"}
open scratchPad.md | decode utf-8 | lines | each { |row| $row | str starts-with "-"}
source $nu.config-path
clear
sort combinations scratchPad.md "---" | str starts-with "-"
sort combinations scratchPad.md "---"
clear
source $nu.config-path
sort combinations scratchPad.md "---"
let test_skip = "-" | str starts-with "-"
$test_skip
$test_skip | describe 
print -h
clear
source $nu.config-path
sort combinations scratchPad.md "---"
help each
clear
source $nu.config-path
sort combinations scratchPad.md "---"
clear
source $nu.config-path
insert -h
source $nu.config-path
sort combinations scratchPad.md "---"
clear
source $nu.config-path
sort combinations scratchPad.md "---"
clear
source $nu.config-path
sort combinations scratchPad.md "---"
clear
source $nu.config-path
sort combinations scratchPad.md "---"
vim $nu.config-path
clear
vim .
clear
source $nu.config-path
sort combinations scratchPad.md "---"
clear
sort combinations scratchPad.md "---"
clear
source $nu.config-path
sort combinations scratchPad.md "---"
clar
cledar
clear
source $nu.config-path
sort combinations scratchPad.md "---"
clear
source $nu.config-path
sort combinations scratchPad.md "---"
append -h
clear
source $nu.config-path
sort combinations scratchPad.md "---"
clear
source $nu.config-path
sort combinations scratchPad.md "---"
help --find 'add'
clear
source $nu.config-path
sort combinations scratchPad.md "---"
clear
source $nu.config-path
sort combinations scratchPad.md "---"
source $nu.config-path
sort combinations scratchPad.md "---"
clear
str starts-with -h
cd proj-125
clear
sl
ls
cd transactions\
ls
sort combinations combinations.md
sourv
clear
source $nu.config-path
clear
sort combinations combinations.md
clear
source $nu.config-path
sort combinations combinations.md
help --find 'match'
help --find 'find'
"***" | find -r "^\*"
"***" | find -r "^\\*"
"***" | find -r "^-"
"***" | find -r "^-" | describe 
"***" | find -r "^-|\\*|_" 
"___" | find -r "^-|\\*|_" 
"---" | find -r "^-|\\*|_" 
"-*" | find -r "^-|\\*|_" 
clear
help --find 'not'
clear
help --find 'null'
help --find 'nothing'
"-*" | find -r "^-|\\*|_" | length
"asdfaf" | find -r "^-|\\*|_" | length
clear
source $nu.config-path
sort combinations combinations.md
clear
source $nu.config-path
sort combinations combinations.md
clear
source $nu.config-path
sort combinations combinations.md
clear
source $nu.config-path
sort combinations combinations.md
clear
source $nu.config-path
sort combinations combinations.md
clear
let $lines = open combinations.md | lines
for $l in $lines {<\n>print $l | find -r "^-|\\*|_"<\n>}
for $l in $lines {<\n>echp $l | find -r "^-|\\*|_"<\n>}
for $l in $lines {<\n>echo $l | find -r "^-|\\*|_"<\n>}
for $l in $lines {<\n>$l | find -r "^-|\\*|_"<\n>}
for $l in $lines {<\n>return $l | find -r "^-|\\*|_"<\n>}
clear
source $nu.config-path
sort combinations combinations.md
clear
source $nu.config-path
clear
source $nu.config-path
sort combinations combinations.md
clear
vim $nu.config-path
clear
exit
vim .
clear
cd ..
cd proj-125
start devdocs\devdocs.docx
clear
cd proj-125
clear
cd transactions\
clear
sort combinations combinations.md
sort combinations combinations.md | to text
sort combinations combinations.md | to text | str trim
sort combinations combinations.md | to text
vim test.cml
vim text.cml
vim test.xml
clear
cd nvim
vim
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
im .
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
git st
git add .; git cm 'updates'
git push
clear
eixt
exit
cd nvim
vim .
clear
cd devdoc
cdi 
ls
cd ConnectCicDevDocs\
ls
open OH_LEADS.htm
clear
open OH_LEADS.htm | decode utf-8
open OH_LEADS.htm | decode utf-8 | filter -r "Possible Combinations"
open OH_LEADS.htm | decode utf-8 | filter "Possible Combinations"
open OH_LEADS.htm | decode utf-8 | lines
clear
open OH_LEADS.htm | decode utf-8 | from xml
open OH_LEADS.htm | decode utf-8 | from html
clear
help --find 'search'
open OH_LEADS.htm | decode utf-8 | find -r "Possible Combinations"
clear
cd ConnectCicDevDocs\
cd ConnectCICDevDocs
clear
open OH_LEADS.htm | decode utf-8 | find -r "CombinationList"
open OH_LEADS.htm | decode utf-8 | find -r "class=CombinationList"
open OH_LEADS.htm | decode utf-8 | find -r "class=CombinationList" | first 5
open OH_LEADS.htm | decode utf-8 | vim
exit
clear
exit
clear
cd xmlapi
ls
cd data
ls
cd data
ls
clear
ls
cd OH_LEADS\
rg --type=xml QVAD
rg --type=xml QVAL
cd g:/
cd G:\Reference Information\ConnectCIC State Documentation\Ohio
cd 'G:\Reference Information\ConnectCIC State Documentation\Ohio'
rg --type=xml QVAL
rg QVAL
rg --type=docx QVAL
cd xmlapoi
cd xmlapi
clear
rg --type=xml ET
data oh_leads
cd data oh_leads
clear
rg --type=xml ET
rg --type=xml ET<
clear
rg --type=xml ET<
clear
cd stateforms
ls
open OH.xml | from xml 
open OH.xml
open OH.xml | from xml
open OH.xml | to xml
open OH.xml 
open OH.xml | $in.content
open OH.xml | $in.content.state
open OH.xml | $in.content | first 1
open OH.xml | $in.content.State
clear
open OH.xml | $in.content | $in.State
open OH.xml | $in.content | get State
open OH.xml | get content
open OH.xml | get content | get state
open OH.xml | get content | select State
clear
sort combinations combinations.md | to text
clear
sort combinations combinations.md | to text
clear
rg --type=xml QGB
rg --type=xml CT<
clear
rg --type=xml -e "XT|MT\<"
rg --type=xml -e "XT|MT\\<"
rg --type=xml -e ">XT|MT\\<"
rg --type=xml -e ">XT\\<"
rg --type=xml -e ">XT<"
rg --type=xml -e ">XT|MT<"
rg --type=xml >ZV>
rg --type=xml >ZV<
rg --type=xml -e ">ZV<"
rg --type=xml ZV
cd cic database
clear
dbmanager export-content
clear
exit
vim $nu.config-path
git st
git fetch origin
git stash
git pull --rebase
git stash poop
git stash pop
git add .; git cm 'PROJ-125: OH_LEADS Transaction Creation'
git push
dbmanager import-content
clear
git fetch origin
clear
cd data oh_leads
cd nvim
vim .
git add .; git cm 'cleared guicursor'
git push
exit
clear
sort combinations combinations.md | to text
vim $nu.config-path
cd nvim
vim .
exit
vim .
vim $nu.config-path
cd nvim
vim .
git add .; git cm 'defaulted guicursor'
git push
exit
help --find 'str'<\n>
sort combinations combinations.md 
sort combinations combinations.md | every 1 | str starts-with " "
sort combinations combinations.md | to text
source $nu.config-path
sort combinations combinations.md | to text
sort combinations combinations.md | every 1 | str starts-with " "
source $nu.config-path
sort combinations combinations.md | every 1 | str starts-with " "
sort combinations combinations.md | every 1 | str trim " "
sort combinations combinations.md | to text | str trim " "
sort combinations combinations.md | to text | str trim 
sort combinations combinations.md | to text | str trim
str trim -h
sort combinations combinations.md | to text | str trim --left
sort combinations combinations.md | to text | str trim --left --char " "
sort combinations combinations.md | to text | str trim --char " "
sort combinations combinations.md | every 1 | str trim --char " "
clear
source $nu.config-path
sort combinations combinations.md
sort combinations combinations.md | to text
clear
exit
rg --type=xml AWW
cd xmlapi
ls
cd metadata
vim OH_LEADS.xml
exit
vim ..\..\StateForms\OH.xml
clear
explorer 
cd ../../
git fetch origin
dbmanager export-content
git st
git fetch origin -dev
git fetch origin dev
gt st
git st
clear
git add .; git cm 'INT-4822: Updated WMPEWantedPerson Transactions to PEWantedPerson'
git push
cledar
clear
cd data oh_leads
clear
cd xmlapi 
cd metadata
rg --type=xml PEWantedPersonAdditionalWarrantEntry -g "OH_LEADS.xml"
rg --type=xml PEWantedPersonAdditionalWarrantModify -g OH_LEADS
rg --type=xml PEWantedPersonAdditionalWarrantModify -g OH_LEADS.xml
rg --type=xml PEWantedPersonAdditionalWarrantModify -g "OH_LEADS.xml"
rg --type=xml PEWantedPersonAdditionalWarrantEntry -g OH_LEADS.xml
rg --type=xml LT<
clear
rg --type=xml LT<
rg --type=xml >SWQ<
clear
clear
sort combinations combinations.md | to text
rg --type=xml >War<
rg --type=xml >WAR<
rg --type=xml >QGB<
rg --type=xml >QGB.<
cd connectcic
ls
cd ConnectCicChecklists\
ls
open `OH LEADS ConnectCIC Install & Config Checklist.docx`
open `OH LEADS ConnectCIC Install & Config Checklist.docx` | decode utf-8
clear
start `OH LEADS ConnectCIC Install & Config Checklist.docx`
rg --type=xml >SWQ
rg --type=xml >ZA
rg --type=xml >ZB
rg --type=xml >ZG
rg --type=xml >ZV
cd fsvm02/home/bwilliams
cd //fsvm02/home/bwilliams
core-cd //fsvm02/home/bwilliams
vim git_setup.nu
exit
clear
clear
sort combinations combinations.md | to text
cclear
clear
cd ~
git st
git add .gitconfig
git cm 'updates'
git push
git add .pendulum\*
git add .pendulum\* -f
git st
git cm 'updates'
git push
cd .neorg\
ls
git st
git add .; git cm 'updates'
git push
cd ..
ls
clear
git st
clear
cd appdata
clear
git st
git add .; git cm 'updates'
git cm 'updates'
git push
cd cic database
dbmanager export-cotnent
dbmanager export-content
git st
git fetch origin dev
git st
git add .; git cm 'INT-4822: Updated transactions, created new transactions'
git push
cd licensetool
git st
explorer
clear
git st
git add .; git cm 'WIP: 20240813'
git push
clear
cd database-2-prod
ls
git st
dbmanager export-content --database=clipsdevx
git st
cd database
ls
cd ..
cd clips database
dbmanager export-content --database=clips1x
git st
diff 
git diff
git diff Data\CA_CLETS\Form
git diff Data\CA_CLETS\Forms\W60\tblConnectCICForm.sql
git difftool
pswh
powershell
clear
git st
git stash
clear
git stash pop
git restore .
git st
clear
exit
$env.PATH
clear
$env.PATH | to text | save \\FSVM02\\home\\bwilliams\\.env-user
$env.PATH | to text | save ~\Desktop\.env-user
clrea
clear
$env
$env | to text
$env | to text | save ~\Desktop\.env-whole.txt
cd localstate
clear
cd desktop
cd ~desktop
cd ~/desktop
cd c:/users/bwilliams/desktop
source $nu.config-path
clear
cd
zoxide
cd c:/users/bwilliams/desktop
core-cd c:/users/bwilliams/desktop
clear
ls
core-cd `Dev Stuffs\`
ls
clear
ls
open scoop_apps.json 
open scoop_apps.json | select name | to text
open scoop_apps.json | select name | every 1
open scoop_apps.json | select name | every 1 | to text
open scoop_apps.json | select name | each {|item| $item.name} | every 1
open scoop_apps.json | select name | each {|item| $item.name} | every 1 | cli
open scoop_apps.json | select name | each {|item| $item.name} | every 1 | clip
exi8t
exit
clear
open scoop_apps.json | select name | each {|item| $item.name} | every 1 | vim
open scoop_apps.json | select name | each {|item| $item.name} | every 1 | to text | vim
open scoop_apps.json | select name | each {|item| $item.name} | every 1 | to text | str join " "
open scoop_apps.json | select name | each {|item| $item.name} | every 1 | str join " " | to text | vim
scoop install Γò¡ΓöÇΓöÇΓöÇΓöÇΓö¼ΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓò«
Γöé  0 Γöé 7zip         Γöé
Γöé  1 Γöé bat          Γöé
Γöé  2 Γöé clangd       Γöé
Γöé  3 Γöé cmake        Γöé
Γöé  4 Γöé conan        Γöé
Γöé  5 Γöé delta        Γöé
Γöé  6 Γöé fd           Γöé
Γöé  7 Γöé fzf          Γöé
Γöé  8 Γöé gcc          Γöé
Γöé  9 Γöé lazygit      Γöé
Γöé 10 Γöé less         Γöé
Γöé 11 Γöé mingw        Γöé
Γöé 12 Γöé pastel       Γöé
Γöé 13 Γöé pipx         Γöé
Γöé 14 Γöé pnpm         Γöé
Γöé 15 Γöé scc          Γöé
Γöé 16 Γöé sd           Γöé
Γöé 17 Γöé starship     Γöé
Γöé 18 Γöé vcredist2022 Γöé
Γöé 19 Γöé zoxide       Γöé
Γò░ΓöÇΓöÇΓöÇΓöÇΓö┤ΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓò»
clear
open scoop_apps.json | select name | each {|item| $item.name} | every 1 | str join " " | to text | vim
scoop install 7zip bat clangd cmake conan delta fd fzf gcc lazygit less mingw pastel pipx pnpm scc sd starship vcredist2022 zoxide
scoop isntall zoxide
scoop install zoxide
clear
ls
open .env-user
clear
ls
open .env-whole.txt | to nuon 
open .env-whole.txt 
open .env-whole.txt | to nuon
open .env-whole.txt
open .env-whole.txt | to json
open .env-whole.txt | to json | from json
clear
vim .env-whole.txt
open .env-whole.txt | lines
core-cd c:/users/bwilliams/appdata/local
ls
git clone https://github.com/justbarnt/lazybarnt nvim
git clone https://github.com/justbarnt/lazybarnt.nvim nvim
ls
cd nvim
core-cd nvim
clear
gcc
cmake
cd nvim
cd c:\Users\bwilliams\AppData\Local\nvim\
cd ~
cd nvim
clear
gcc
vim .
cd ~
vim --clean .
cd nvim
vim .
clear
vim .
clear
ps | where name == 'git.exe'
ps
clear
git st
ls
vim .
clear
restore .
git restore .
clear
git fetch origni
git fetch origin
git fetch origin main
cd desktop
cd c:/~/desktop
cd c:/users/bwilliams
cd Desktop\
clear
cd `Dev Stuffs\`
clear
ls
vim .env-whole.txt
nvm
nvm install lts
source $nu.config-path
vim $nu.env-path
source $nu.config-path
vim $nu.env-path
cd ..\nvim-data\
ls
vim mason.log
scoop search npm
clear
cd nvim
clear
npm
nvm use 20.16.0
source $nu.config-path
nvm
nvm
nvm use 20.16.0
clear
nvm
npm
clear
cd desktop
clear
cd `Dev Stuffs\`
clear
path
path add
clear
open .env-whole.txt | lines
open .env-whole.txt | split row ":"
clear
open .env-whole.txt | split row (char esep) | path expand --no-symlink
clear
open .env-whole.txt 
open .env-whole.txt | split row "\n"
open .env-whole.txt | lines | split row "\n"
open .env-whole.txt | lines | split row ":"
clear
$env.XDG_CONFIG_HOME
exit
$env.PATHEXT
help --find prepend
$env.PATH
clear
exit
$env.PNPM_HOME
clear
exit
$env
:qall
exit
vim $nu.env-path
source $nu.config-path
source $nu.env-path
source $nu.config-path
$env.PNPM_HOME
clear
vim .env-whole.txt
exit
php -v
vim $nu.env-path
vim $nu.config-path
vim $nu.env-path
source $nu.config-path
$env.PHP
source $nu
source $nu.env-path; source $nu.config-path
$env.PHP
env update-php 
env update-php PHP8.2
$env.PHP
vim $nu.config-path
clear
source $nu.config-path
php -v
cd c:/
php -v
$env.PHP
clear
vim $nu.env-path
source $nu.env-path; source $nu.config-path
clear
php -v
clear
cd ~
ls
clear
php -v
clear
exit
vim $nu.env-path
str replace -h
path exists "C:/PHP"
path exists C:/PHP
C:/PHP | path exists
path exists -h
'C:\PHP' | path exists
'C:\PHP8,4' | path exists
clear
$env.PATH
help --find replace
help --find list
clear
$env.PATH | lines
$env.PATH
$env.PATH | to text
$env.PATH | to text | str replace 'C:\PHP' 'C:\PHP8.2'
$env.PATH
$env.PATH = ($env.PATH | prepend 'C:\PHP8.2')
$env.PATH
php -v
$env.PATH = ($env.PATH | prepend 'C:\PHP')
$env.PATH
php -v
clear
help --find pop
help --find delete
drop -h
clear
exit
$env.PATH
$env.PATH = ($env.PATH | str replace 'C:\PHP' 'C:\PHP8.2')
$env.PATH
php -v
clear
exit
$env.PATH
clear
exit
$env.PATH 
env update-php PHP8.2
$env.PATH 
clear
ls
cd clips
ls
mkdir CLIIPS
rm -rf CLIIPS
ls
mkdir CLIPS
ls
rm -rf CLIPS\
clear
git -b dev clone https://svnstore:3000/clips/database database-1
git clone -b dev https://svnstore:3000/clips/database database-1
git clone -b dev2-5 https://svnstore:3000/clips/database database-2
git clone -b dev-2.5 https://svnstore:3000/clips/database database-2
clear
cd database-1
cd desktop
cd devdoc
cd `Dev Stuffs\`
clear
open winget_apps.json
$env.PATH
vim $nu.env-path
source $nu.env-path; source $nu.config-path
clear
$env.PATH
clear
$env.PATH
exit
$env.PATH
vim $nu.env-path
xit
exit
cd database-1
clear
dbmanager
curl 
curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh
curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | nu
clear
cd database-1
clear
ls
dbmanager
$env.PATH
clear
vim $nu.env-path
$env.PATH
dbmanager
dbmanager -h
clear
dbmanager
clear
metabuild
metabuilder
replayextraction
dbmanager export-content
clear
vim $nu.env-path
clear
cd dat
clear
dbmanager 
clear
dbmanager create-db import-schema import-content --database=Clips1x
explorer
source $nu.config-path
dbmanager create-db import-schema import-content --database=Clips1x
source $nu.config-path
clear
dbmanager create-db import-schema import-content --database=Clips1x
fd
clear
cd c:
cd c:/
clear
fd --type=dll 
fd Microsoft.SqlServer.BatchParser.dll
explorer `Program Files\Microsoft Visual Studio\2022\Professional\Common7\IDE\Extensions\Microsoft\SQLCommon`
dotnet
dotnet -v
cd database-1
clear
dbmanager create-db import-schema import-content --database=Clips1x
cd database-1
dbmanager
dbmanager create-db import-schema import-content --database=Clips1x
cd .
cd ..
mkdir database-2
ls
cd database-2
ls
dbmanager create-db import-schema import-content --database=Clips2x
cd ..
cd databas-2
cd database-2
dbsync Clips1x Clips2x localhost
cd ..
cd database-2-prod
git st
dbmanager create-db import-schema import-content --database=ClipsDevx
dbsync Clips1x ClipsDevX localhost
clear
cd ..
ls
clear
cd connectcic
ls
explorer 
clear
ls
mkdir database
rm -rf database
clear
git st
clear
ls
git clone -b dev https://svnstore:3000/connectcic/connectcic database
git clone -b dev https://svnstore:3000/connectcic/database database
clear
ls
git repe
git clone -b dev https://svnstore:3000/connectcic/checklists ConnectCICChecklist
git clone -b dev https://svnstore:3000/connectcic/xml-api XmlXpi
git clone https://svnstore:3000/connectcic/query-tester QueryTester
git clone -b dev https://svnstore:3000/connectcic/developer-docs ConnectCICDevDocs
git clone -b dev https://svnstore:3000/connectcic/alias-config AliasConfig
git clone https://svnstore:3000/connectcic/alias-config AliasConfig
clear
cd ../Clips
git clone -b dev https://svnstore:3000/clips/tools-database TransSupport
clear
cd TransSupport\
ls
dbmanager create-db import-schema import-content --database=TransSupport
cd ..\..\ConnectCIC\
cd database
ls
dbmanager create-db import-schema import-content --database=Commsys
clear
cd ../
ls
git clone --recursive-submodules https://svnstore:3000/connectcic/connectcic ConnectCIC
git clone --recure-submodules https://svnstore:3000/connectcic/connectcic ConnectCIC
git clone --recurse-submodules https://svnstore:3000/connectcic/connectcic ConnectCIC
clear
cd ConnectCIC\
ls
cd .bin
ls
mklink
MKLINK /J D:\CommSys\ConnectCIC\database\ReassemblyScripts\ ./ReassemblyScripts
MKLINK /J ./ReassemblyScripts D:\CommSys\ConnectCIC\database\ReassemblyScripts\
MKLINK /J ReassemblyScripts D:\CommSys\ConnectCIC\database\ReassemblyScripts\
ls
MKLINK /J StateForms D:\CommSys\ConnectCIC\database\StateForms\
MKLINK /J Scripts D:\CommSys\ConnectCIC\ConnectCIC\ConnectCIC\Scripts
ls
history 
history dbmanager
history | where command == "dbamanger"
history | where command =~ "dbamanger"
clear
history -h
history | where command =~ dbmanager | get command
cd database-1
clear
ls
cd ..
ls
cd ..
ls
explorer .
which beyondcompare
which beyondcompare.exe
which -h
which 'Beyond Compare'
which 'Beyond Compare 5'
cd c:/
which 'Beyond Compare 5'
fd Compare 5
fd 'Compare 5'
which BCompare
which BCompare.exe
which
which -h
dbmanager import-content --database=clips1x
cd ..
ls
git clone https://svnstore:3000/bwilliams/clips_entry_validation CLIPS-501
ls
clear
cd CLIPS\Application\
clear
vim .
clear
cd 501 application
cd ..\..\CLIPS-501\Application\Config\
ls
vim config_default.xml
ls
cd ..
vim .
clear
cd ..
source $nu.config-path
clear
composer intall
composer install
cdi clips
cd clips
ls
composer install
clear
ls
scoop list
scoop uninstall 7zip
clear
cdi clips
composer install
clear
git st
clear
cd D:
cd D:/
cd CommSys\Utilities\
ls
start ParsingTool\CCICParsing.sln
start TestNcicServer\TestNCICServer.sln
neovide
start TestNcicServer\TestNCICServer.sln
start TransactionEditor\TransactionEditor.sln
cd ..
ls
cd CLIPS\
ls
start ClipsClientService\ClipsClientHelper.sln
neovide
neovide .
neovide
cd c:/
fd neovide
cd c:/
fd neovide
cd ~/appdata
ls
ls roaming
cd roaming
mkdir neovide
cd neovide\
ls
cd nvim
vim .
exit
cd neovide
ls
neovide config.toml
neovide
neovide $"($env.LOCALAPPDATA)/nvim"
neovide
clear
neovide
neovice
neovide
clar
neovide
cd nvim
git add .; git cm 'neovide settings'
git push
git fetch origin
git pull
clear
explorer .
yazi
scoop list
scoop install yazi
clear
yazi
cd ~
ls
ls .config
cd .config/yazi
neovide yazi.toml
yazi
cd nvim
neovide
neovide .
clear
git clone https://github.com/Rolv-Apneseth/starship.yazi.git %AppData%/yazi/config/plugins/starship.yazi
yazi
cd yazi
ls
neovide init.lua
$env.STARSHIP_SHELL
clear
ls ..
vim init.lua
yazi
lua -v
clear
explorer .
$env.YAZI_CONFIG_HOME
git clone https://github.com/Rolv-Apneseth/starship.yazi.git ~\.config\yazi\plugins\starship.yazi
ls
ls plugins\
vim plugins\starship.yazi\
clear
source $nu.config-path
yazi
clear
vim $nu.config-path
source $nu.config-path
cd nvim
git st
nv .
clear
nv .
yazi
nv .
yazi
git st
git add .; git cm 'added yazi.nvim but only if using neovide'
git push
yazi
$env.YAZI_FILE_ONE
clear
nv $nu.config-path
nv $nu.env-path
yazi
cd yazi
vim .
yazi
git clone https://svnstore:3000/bwilliams/appdata 
clear
cd cic database
clear
ls
cd data
cd OH_LEADS\
cd D:/
ls
mkdir Github
cd github
clear
ls
clear
git clone https://github.com/justbarnt/ripgreg
git clone https://github.com/justbarnt/ripgrep
cd ripgrep\
cargo build --release
cd .\target\release\rg
.\target\release\rg --versoin
.\target\release\rg --version
cargo build --release --features 'pcre2'
rg --type=xml >ZV
source $nu.config-path
rg
source $nu.config-path
$env.PATH
rg
cd cic oh_leads
cd cic database oh_leads
cd oh_leads
cdi
cd Data\
cd oh_leads
clear
rg --type=xml >WW<
cd ../..
dbmanager export-content
git st
git stash
git fetch origin dev
git pull --rebase
clear
git stash pop
git st
git add .; git cm 'INT-4822: Updated transactions, created new transactions'
dbmanager import-content
clear
cd cic database oh_leads
clear
rg --type=xml >WW<
rg --type=xml >ZW<
cd proj-125
ls
sort combinations transactions/combinations.md | to text
cd cic databas
clear
dbmanager export-content
git st
clear
git stash
git fetch origin dev
git pull --rebase
git stash pop
clear
git add .; git cm 'INT-4822: Finished Implementation of Transactions handed to me'
git push
exit
cd proj-125
ls
cd Metadata\
metabuilder -h
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
cd utilities
ls
cd ..
ls
cd ..
ls
cd c:\Utilities\
ls
vim MetaBuilder.cfg
cd proj-125
cd Metadata\
ls
clear
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
yazi
vim c:\Utilities\MetaBuilder.cfg
yazi
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
ls
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
exit
pwsh
clear
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
svn
svn help
explorer .
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
clear
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
go install github.com/microsoft/go-mssqldb@latest
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
cd proj-125
clear
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
clear
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
cd clips clips
cd ..\CLIPS\
cd Application\
start-clips 
clear
exit
cd hyper
cd proj-125
clear
cd Metadata\
clear
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
clear
cd proj-125 meta
clear
cd cic database
dbmanager create-db import-schema import-content --database=CommSys
clear
cd database-1
dbmanager create-db import-schema import-content --database=Clips1
cd database-2
dbmanager create-db import-schema import-content --database=Clips2
cd database-2-prod
dbmanager create-db import-schema import-content --database=ClipsDevX
cd database-2
dbsync Clips1 Clips2 localhost
clear
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
cd cic database
ls
clear
cd proj-125 meta
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
cd `G:\Support\Temp\ForBrent\`
ls
cd c:/
clear
which MSADO
fd MSADO
clear
cp G:\Support\Temp\ForBrent\msado15.dll c:/msadodll
regsvr32.exe msado15.dll
exit
cd proj-125 meta
mete
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
cd proj-125 meta
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
ls
explorer .
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
ls
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t ./OH_LEADS_BUILDER.xml
ls
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
ls
ls ..
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
ls
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t OH_LEADS_BUILDER.xml
ls
metabuilder OH_LEADS OH_LEADS_BUILD.xml /t
ls
ls ..
cd d:
cd d:/
fd OH_LEADS_BUILDER.xml
cd c:/
fd OH_LEADS_BUILDER.xml
cd proj-125 meta
metabuilder OH_LEADS /t ./OH_LEADS_BUILD.xml 
metabuilder OH_LEADS /t ./
cd xmlapi
cd connectcic
ls
cd XmlApi\
git restore .
cleaar
clear
cd proj-125 meta
metabuilder OH_LEADS /t ../
cd xmlapi
git restore .
git st
git restore .
git st
clear
cd proj-125 meta
metabuilder OH_LEADS /t d:/
vim c:\Utilities\MetaBuilder.cfg
metabuilder OH_LEADS /t d:/
vim c:\Utilities\MetaBuilder.cfg
nv d:\OH_LEADS.xml
cd nvim
git st
git diff
clear
git add .; git cm 'chore: deps'
git push
vim .
exit
cd nvim
vim .
git add .; git cm 'update: settings'
git push
exit
cd nvim
nv .
git add .; git cm 'chore: typo'
gi tpush
git push
nv d:\OH_LEADS.xml
nv .
git add .; git cm 'chore: update telescope settings'
git push
cd c:/
fd devenv.exe
devenv 
devenv.ece
devenv.exe
start devenv
start devenv.exe
open devenv.exe
start `c:\Program Files\Microsoft Visual Studio\2022\Professional\Common7\IDE\devenv.exe`
$env.PATH
start devenv.exe
nv $nu.config-path
vs 
nv $nu.config-path
source $nu.config-path
vs 
nv $nu.config-path
source $nu.config-path
vs .
nv $nu.config-path
source $nu.config-path
cd proj-125 meta
ls
start vs OH_LEADS.xml
nv $nu.config-path
source $nu.config-path
start vs OH_LEADS.xml
cd cic database
clear
git fetch origin
clear
git restore .
cd xmlapi
git st
git restore .
explorer .
git st
git restore .
git st
dbmanager export-content
git fetch origin dev
git fetch origin
git pull
cd d:/
clear
mkdir svn
ls
mv svn\ commsys\
ls
cd CommSys\
ls
mv svn CommSys_SVN
ls
cd CommSys_SVN\
svn help
git st
git pull --rebase
git add .
git st
git pull --rebase
dbmanager import-content
cd CommSys_SVN\
clear
svn help
svn co 
svn help co
cd ..\CommSys_SVN\
clear
svn co https://svnstore:8443/svn/commsys/ConnectCic3/XmlApi/Branches/dev XmlApi
cd ConnectCIC\XmlApi\
clea
clear
ls
git fetch origin
git pull --rebase
clear
cd proj-125 meta
start vs OH_LEADS.xml
cd xmlapi
ls
cd ..
cd xmlapi
clear
cd cic database
cd data oh_leads
rg --type=xml EntryCode
rg --type=xml EntryType
rg --type=xml VehicleEntryType
rg --type=xml >MV<
rg --type=xml EntryType
cd proj-125 meta
ls
cd ..
ls
vn transactions\combinations.md
cd proj-125
sort combinations transactions/combinations.md | to text
clear
nv StateForms\OH_LEADS.xml
cd xmlapi
start vs Metadata\OH_LEADS.xml
cd cic database
start vs StateForms\OH.xml
git st
dbmanager export-content
clear
ls
git st
ls
dbmanager export-content
cd xmlapi
git st
ls
ls -a
nv
nv .
nv .gitignore
git st
git fetch origin
git fetch origin dev
git st
git add .gitignore; git cm '.gitignore: .vs and .vscode'
git pus
git push
git st
git add Metadata\OH_LEADS.xml; git cm 'INT-4822: Merged Temp MetaData into Main metadata'
git push
exit
git st
git diff
clear
git st
git fetch origin dev
git add .; git cm 'INT-4822(Updates, StateForms): Updated a few transactions upon reviewing and mergine metadata/devdocs. Added my transactions to the stateforms'
git push
clear
cd d:/
cd Github\
clear
ls
git clone https://github.com/justbarnt/hyper-eldritch
rm -rf hyper-eldritch\
git clone --recurse-submodules https://github.com/justbarnt/hyper-eldritch
clear
git clone https://github.com/justbarnt/eldritch.nvim
exit
clear
cd ..\Github\eldritch.nvim\
cd hyper-eldritch\
vim .
exit
vim .
exit
cd github
cd hyper-eldritch\
npm 
npm publish
npm adduser
npm
cd hyper
cd c:\Users\bwilliams\AppData\Roaming\Hyper\
ls
nv .hyper.js
clear
exit
cd ../github
clear
ls
help | where command =~ "str"
help
clear
ls
help commands | where command =~ str
help commands | where command_type =~ str
help commands | where command_type =~ string
clear
ls
help commands 
clear
ls
help commands | where name =~ 'str'
clear
ls
help commands | where name =~ 'str' | first 5
clear
fastfetch
scoop list
clear
scoop search fastfetch
scoop install fastfetch
clear
fastfetch
clear
fastfetch
cd hyper-eldritch
clear
git st
git add .; git cm 'theme creation'
git push
clear
git config --local --edit
git commit --amend
git st
git push
git fetch origin
ls
rm -rf .git
clear
git init
git config --local --edit
git add .; git cm 'Theme Creation'; git remote add https://github.com/justbarnt/hyper-eldritch.git;
git remote origin add https://github.com/justbarnt/hyper-eldritch.git
git remote add origin https://github.com/justbarnt/hyper-eldritch.git
git st
git push
clear
clar
clear
cd github
clear
ls
git clone https://github.com/microsoft/theme-converter-for-vs 
cd theme-converter-for-vs\
ls
cd ThemeConverter\
ls
cd ThemeConverter\
ls
clear
dotnet build ThemeConverter.csproj
clear
ls
nv JSON\Eldritch.jsonc
mv JSON\Eldritch.jsonc JSON\Eldritch.json
ls json
explorer .
start vs
explorer .
ThemeConverter
exit
ls
cd bin
ls
cd debug
ls
cd  net6.0\
ls
ThemeConverter -h
clear
explorer .
source $nu.env-path; source $nu.config-path
cd vs-themes
cd bwilliams
cd vs-themes\
ThemeConverter -h
exit
cd c:/
where hyper.exe
which hyper.exe
which hyper
which hyper | cd $"$in.path"
which hyper | $"$in.path"
which hyper | $"($in.path)"
which hyper | $"($in.path)[0]"
which hyper | $"($in.path[0])"
which hyper | cd $"($in.path)"
which hyper | get path
which hyper | select path
which hyper | select path | get 0
which hyper | select path | get 0 | get pathc
which hyper | select path | get 0 | get path
which hyper | select path | get path
which hyper 
which hyper | select path
which hyper | select path | values
which hyper | select path values
which hyper | select path | get values
which hyper | select path | values
which hyper | select path | values[0]
which hyper | select path | $in
which hyper | select path | $in.path
which hyper | select path | $in.path.0
which hyper | select path | cd $"($in.path.0)" 
which hyper | select path | $in.path.0 | str replace .cmd ""  
which hyper | select path | $in.path.0 | str replace .cmd "" | cd $"($in)"
which hyper | select path | $in.path.0 | str replace .cmd "" | ($in)
cd local programs
cd local
cd appdata
cd local
cd programs
cd hyper
ls
explorer .
which start menu
which start
cd c:
cd c:/
fd -td "Start Menu"
fd -td Start
cd appdata
clear
fd -td Start
exit
ThemeConverter.exe -i Eldritch.json -t `C:\Program Files\Microsoft Visual Studio\2022\Professional`
ThemeConverter.exe -i ./Eldritch.json -t `C:\Program Files\Microsoft Visual Studio\2022\Professional`
ThemeConverter.exe -i ./Eldritch.json -t 'C:\Program Files\Microsoft Visual Studio\2022\Professional'
ThemeConverter.exe -i Eldritch.json -t 'C:\Program Files\Microsoft Visual Studio\2022\Professional'
cd vs-theme
cdi
clear
ThemeConverter.exe -i Eldritch.json -t 'C:\Program Files\Microsoft Visual Studio\2022\Professional'
ThemeConverter.exe -i C:\users\bwilliams\vs-themes\Eldritch.json -t 'C:\Program Files\Microsoft Visual Studio\2022\Professional'
clear
cd net6.0
clear
ls
ThemeConverter.exe -i C:\users\bwilliams\vs-themes\Eldritch.json -t 'C:\Program Files\Microsoft Visual Studio\2022\Professional'
cd net6.0
clear
ThemeConverter.exe -i C:\Users\bwilliams\vs-themes\Eldritch-vs\Eldritch-vs\Eldritch.json -t `C:\Program Files\Microsoft Visu`
ThemeConverter.exe -i C:\Users\bwilliams\vs-themes\Eldritch-vs\Eldritch-vs\Eldritch.json -t `C:\Program Files\Microsoft Visual Studio\2022\Professional`
cd net6.0
ThemeConverter.exe -i C:\Users\bwilliams\vs-themes\Eldritch-vs\Eldritch-vs\Eldritch.json -t `C:\Program Files\Microsoft Visual Studio\2022\Professional`
ThemeConverter.exe -i C:\Users\bwilliams\vs-themes\Eldritch-vs\Eldritch-vs\Eldritch.json -o D:\Github\theme-converter-for-vs\Themes\
exit
explorer .
cd c:/
which neovide
which neovim | get path
which nvim | get pathc
which nvim | get path
which nvim | get path | $in
which nvim | get path | get 0
which nvim | get path | get 0 | cd `c:\Program Files\Neovim\bin`
explorer .
cd nvim
nv .
git st
git add .; git cm 'chore'
git push
vim $nu.config
vim $nu.config-path
exit
cd nvim
clear
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
cd nvim-data
cd ../nvim-data
ls
rm -rf shada swap
cd nvim
clear
vim .
clear
fd --help
fd --help | vim
vim .
clear
vim .
clear
vim .
git add .; git cm 'fix(telescope): `path_display: first_name` not working due to bad path-separator value in fd/rg call'
git push
git fetch orign
git fetch origin
git pull --rebase
git push
clear
vim .
exit
exit
cd nvim
vim .
clear
vim .
explorer ..\nvim-data\
exit
cd nvim
vim .
explorer ..\nvim-data\
clear
exit
cd ~
ls
cd .neorg\
clear
ls
cd work
cd projects\
ls
rm -f ClipsEnhancements
mkdir ClipsEnhancements
cd ClipsEnhancements\
nv .
cd ..
cd .
cd ..
clear
nv .
nv --log .
ls
vim neovide_rCURRENT.log
clear
rm -f neovide_rCURRENT.log
nvim --help
cd ~
ls
cd .neorg\
ls
cd nvim
clear
vim .
clear
exit
cd d:\Github\
git clone https://github.com/justbarnt/wezterm 
clear
ls
git clone --depth=1 --branch=main --recursive https://github.com/justbarnt/wezterm 
cd wezterm\
git submodule update --init --recursive
.\get-deps
ls
cd get-deps
ls
explorer .
ls
vim $nu.env-path
clear
source $nu.env-path; source $nu.config-path
$env.PATH
clear
cargo build --release
cargo
$env.PATH
clear
cargo
clear
cargo build --release
cd d:\Github\wezterm\
clear
cd d:\Github\wezterm\
cd ..
rm -rf wez
rm -rf wezterm\
clear
cd .config\wezterm\
ls
cd .config\wezterm\
vim .
exit
clear
cd .config\wezterm\
clear
vim .
clear
exit
cd .config\wezterm\
vim .
exit
cd .config\wezterm\
which nu
vim wezterm.lua
exit
cd github
git clone --depth=1 --branch=main --recursive https://github.com/justbarnt/wezterm 
cd wezterm\
clear
git submodule update --init --recursive
cargo build --release
clear
$env.PATH
clear
cargo
clear
cargo build --release
cd ..
rm -rf wezterm\
git clone --depth=1 --branch=main --recursive https://github.com/wez/wezterm.git
cd wezterm\
cargo build --release
$env.PATH
rustc --versoin
rustc --version
clear
cargo build --release
cd wezterm\
cd github wezterm
cargo build --release
rustup self uninstall
cd github wezterm
clear
cargo build --release
cargo add clippy
clear
explorer .
cd .config\wezterm\
vim wezterm.lua
exit
cd .config\wezterm\
$env.PATH
clear
exit
cd nushell
cdi
cd nushell
clear
ls
mv config.nu config.nu.bak
mv env.nu env.nu.bak
ls
mv env.nu.bak env.nu
mv config.nu.bak config.nu
ls
clear
eixt
exit
cd .config\wezterm\
vim wezterm.lua
cd nvim
SetUserVar
clear
exit
vim .
clear
vim .
clear
vim .
git st
git add .; git cm 'added more plugins I wanted ported over from my old config'
git push
clear
cd ~/.config/wezterm
clear
vim wezterm.lua
exit
cd ~/.config/wezterm
ls
git clone https://github.com/eldritch-theme/wezterm ./colors/
ls colors
cd colors
ls
rm -rf .git
clear
ls
mv eldritch.toml Eldritch/eldritch.toml
mkdir Eldritch
mv eldritch.toml Eldritch/eldritch.toml
ls
rm -rf LICENSE README.md screenshot.png
ls
exit
vim wezterm.lua
cd .config\wezterm\
vim wezterm.lua
exit
cd .config\wezterm\
exit
vim wezterm.lua
clear
vim wezterm.lua
clear
vim wezterm.lua
ls
ls -a
git init
clear
rm -rf .git
cd ..
ls -a
git remote add origin https://github.com/justbarnt/.config
clear
ls
ls -a
cd ..
ls -a
open .gitconfig
cd .config
ls
ls -a
git remote add ghub https://github.com/justbarnt/.config
cd ..
cd .git
ls -a
clear
cd .config
git init
explorer .
clear
git init
git remote add ghub https://github.com/justbarnt/.config
git fetch orign
git fetch origin
git fetch ghub
git st
git add .; git cm 'updates'
git remote add https://github.com/Rolv-Apneseth/starship.yazi yazi\plugins\starship.yazi\
git submodule add https://github.com/Rolv-Apneseth/starship.yazi yazi\plugins\starship.yazi\
git submodule add https://github.com/Rolv-Apneseth/starship.yazi
git st
git add .; git commit 'sub modules'
git st
git add .
git st
git commit 'submodules'
git add .gitmodules
git st
git cm 'updates'
git push
git push --force
clear
ls -a
vim .gitmodules
git st
git add .; git cm 'fix submodule path'
git push
ls
rm -rf starship.yazi
ls
git add .; git cm 'deletion of wrong submodule'
git push
clear
ls
git fetch ghub main
git pull --rebase
clear
cd config wezterm
clear
vim .
luarocks
luarocks install luafilesystem
mingw
scoop list
mingw32-make
cd `c:\Program Files (x86)\lua`
ls
cd 5.1\
ls
vim luarocks_config.lua
luarocks install /MW luafilesystem
cd ../../../
ls
clear
exit
scoop list lua
scoop search list
scoop search lua
scoop install lua-for-windows
exit
clear
lua
clear
luarocks
luarocks install luafilesystem
cd github
git clone https://github.com/luarocks/luarocks
scoop uninstall lua-for-windows
clear
cd luarocks
ls
install /?
install /MW
cd ..
curl -L -R -O https://www.lua.org./ftp/lua-5.1.5.tar.gz
cd downloads
cd ~/Downloads
clear
tar -h
clear
tar zxf lua-5.1.5.tar.gz
cd D:\lua-5.1.5\
clear
ls
make all test
open readme
clar
clear
ls
open INSTALL
make mingw
make
make install
scoop list
scoop uninstall mingw
exit
mingw64-make
cl
clangd
gcc
clagnd
clangd
clear
clangd
scoop search mingw64
scoop install msys2
msys2
mingw64.cmd 
clangd
clear
cd d:\lua-5.1.5\
clear
ls
vim Makefile
clear
make
smake
cmake
scoop uninstall msys2
clear
exit
make
clear
cd d:\lua-5.1.5\
clear
make mingw
vim Makefile
mingw32-make.exe 
mingw32-make.exe mingw
scoop list
scoop uninstall gcc
clear
source $nu.env-path; source $nu.config-path
clear
gcc
mingw32-make.exe mingw
etc\luavs.bat
clear
cmake -v
cmake --versoin
cmake --version
vim CMakeLists.txt
cmake -G "Visual Studio 2022"
cmake -G "MingW Makefiles"
explorer .
cmake -G "Visual Studio 17 2022" -A x64
vim CMakeLists.txt
cmake -G "Visual Studio 17 2022" -A x64 -S .\src\
cmake -G "Visual Studio 17 2022" -A x64 -S .
cd d:\Github\luarocks\
cd ..
cd ..\lua-5.1.5\
clear
cmake -G "Visual Studio 10"
cmake -G "Visual Studio 10" -A x64
cmake -G "MingW Makefiles" -A x64
cmake -G "MingW Makefiles" -A x64 -S .
clear
vim CMakeLists.txt
cmake --version
rm -f CMakeLists.txt
vim CMakeLists.txt
cmake -G "MingW Makefiles" -A x64
cmake -G "MingW"
mkdir build
cd build
cmake -G "MinGW Makefiles" ..
vim ..\CMakeLists.txt
cd ..
make generic
clear
vim ..\CMakeLists.txt
rm -f CMakeLists.txt
vim CMakeLists.txt
ls
cd build
ls
rm -rf CMakeCache.txt CMakeFiles\
ls
cmake ..
vim ..\CMakeLists.txt
cmake ..
ls
cmake --build
cmake --build .
ls
cd Debug\
lua_exec.exe
clear
lua -
lua -v
luarocks
exit
cd lua 5.1
clear
cd luarocks
ls
INSTALL /MW
clear
luarocks
exit
luarocks
luarocks config
clear
luarocks install luafilesystem
exit
luarocks
VsDevCmd.bat -host_arch=amd64 -arch=amd64
exit
cd c:/
which luafilesystem
fd luafilesystem
fd rocks
clear
exit
luarocks install luafilesystem
cd nvim
vim .
git fetch origin
git pull
clear
vim .
clear
vim .
cd config wezterm
vim .
lua
clear
exit
cd nvim
vim .
git add .; git cm 'updates to markview'
git push
exit
clear
git st
git add we
git add wezterm.lua utils\utils.lua
git cm 'updated wezterm'
git push ghub
exit
clear
top
cmd.exe
cd c:?
cd c:/
fd -tf vcvars64
exit
cd nvim
vim .
exit
cd `Program Files\Microsoft Visual Studio\2022\Professional\`
fd -tf *.ps1
fd -tf --glob *.ps1
exit
pwhs
pwsh
vim wezterm.lua
clear
clear
exit
pwsh
exit
$env.HOMEPATH
exit
cd c:\Users\bwilliams\Pictures\
ls
wezterm imgcat eldritch.png
clear
yazi
clear
exit
vim wezterm.lua
git add ./*
git st
git cm 'updated wezterm launch menu config'
git push
clear
cd nvim
clear
cd wezterm
git add ./*
git cm 'added key to launch Lauch Menu'
git push
vim wezterm.lua
git add ./*; git cm 'updated key maps'
git push
clear
cd nvim
vim .
clear
vim .
cd nvim-data
cd lazy\
ls
cd neorg\
ls
vim .
clear
exit
vim .
vim 
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
clear
vim .
ps | where name == 'git.exe'
clear
cd ..
rm -rf nvim-data\
cd nvim
vim .
clear
vim .
clear
vim .
clear
vim .
cd ~\.neorg\
clear
ls
start clips 501
start clips
cdi
vim .
start clips
exit
git add .; git cm 'chore: updating cmp to not include stupid lsp snippets'
git push
exit
sfc
cd c:\Windows\Logs\CBS\
vim CBS.log
exit
vim .
git fetch origin c:\Users\bwilliams\AppData\Local\nvim\
cd nvim
git fetch origin
git pull 
cd .nerog
cd .neorg
cd nvim
vim .
git fetch origin
clear
vim .
cd wezterm
cd neorg
vim .
cd wezeterm
cd wezterm
vim .
nvim 
exit
nu
exit
nvim .
exit
stdout
is-terminal
is-terminal --stdout
is-terminal -h
eixt
exit
cd ~
cd .local\share\wezterm\
ls
vim wezterm-gui.exe-log-11524.txt
vim .
rm -f *.txt
ls
vim $nu.env-path
exit
nvim .
exit
cd config wezterm
exit
exit
vim .
vim $nu.env-path
exit
docker
clear
cd ..
mkdir Penpot
cd Penpot\
curl -o docker-compose.yaml https://raw.githubusercontent.com/penpot/penpot/main/docker/images/docker-compose.yaml
curl -h
wget docker-compose.yaml https://raw.githubusercontent.com/penpot/penpot/main/docker/images/docker-compose.yaml
curl -o docker-compose.yaml https://raw.githubusercontent.com/penpot/penpot/main/docker/images/docker-compose.yaml
wget docker-compose.yaml https://raw.githubusercontent.com/penpot/penpot/main/docker/images/docker-compose.yaml
curl -o ./docker-compose.yaml https://raw.githubusercontent.com/penpot/penpot/main/docker/images/docker-compose.yaml
wget ./docker-compose.yaml https://raw.githubusercontent.com/penpot/penpot/main/docker/images/docker-compose.yaml
vim docker-compose.yaml
docker 
docker compose -h
docker compose -p penpot -f docker-compose.yaml -d
docker compose -p penpot -f docker-compose.yaml up -d
docker ps
docker ps | split words
clear
docker ps
vim docker-compose.yaml
docker compose -f docker-compose.yaml pull
vim docker-compose.yaml
cd clips
ls
cd clips-62
cd clips-162
clear
cd ..
cd CLIPS-162\
clear
vim .
composer install
clear
vim .
exit
docker compose -p penpot -f docker-compose.yaml down
docker compose -p penpot -f docker-compose.yaml up -d
clear
vim docker-compose.yaml
docker compose -p penpot -f docker-compose.yaml down
docker compose -p penpot -f docker-compose.yaml up -d
docker ps
docker exec -ti penpot-penpot-backend-1 python3 manage.py create-profile
vim docker-compose.yaml
docker compose -p penpot -f docker-compose.yaml down
docker compose -p penpot -f docker-compose.yaml up-d
docker compose -p penpot -f docker-compose.yaml up -d
docker exec -ti penpot-penpot-backend-1 python3 manage.py create-profile
ls
cd Utilities\
ls
cd TransactionEditor\
ls
ls -h
ls -m
clear
ls -h
ls ...(glob *.sln)
ls ...(glob *.sln) | name
ls ...(glob *.sln) | select name
ls ...(glob *.sln) | get name
ls ...(glob *.sln) | $in.0
ls ...(glob *.sln) | $in.0.name
clear
source $nu.config-path
start vs
vim $nu.config-path
exit
cd penpot
clear
cd nvim
vim .
exit
start clips 162
start clips clips-501
clear
exit
clear
source $nu.config-path
start clips 162
source $nu.config-path
start clips 162
clear
vim $nu.config-path
exit
source $nu.config-path
clear
ls | where type == dir | each { |it|<\n>{name: $it.name, len: (ls $it.name | length) }<\n>}
cd D:\CommSys\
ls | where type == dir | each { |it|<\n>{name: $it.name, len: (ls $it.name | length) }<\n>}
cd ~
ls | where type == dir | each { |it|<\n>{name: $it.name, len: (ls $it.name | length) }<\n>}
ls | where type == dir | par-each { |it|<\n>{name: $it.name, len: (ls $it.name | length) }<\n>}
ls | where type == dir | par-each { |it|<\n>{name: $it.name, len: (cd $it.name | length) }<\n>}
ls | where type == dir | par-each { |it|<\n>{name: $it.name, len: (cd $it.name; ls | length) }<\n>}
cd pen
ls
open docker-compose.yaml | explore --peek | to yaml | save test.yaml
ls
rm -f test.yaml
clear
ps | explore
clear
use std
scope commands | select name usage | where name =~ "std "
clear
vim $nu.env-path
clear
source $nu.config-path
vim $nu.env-path
exit
exit
clear
cd .neorg
vim 
exit
cd Parsing
cd d:/CommSys/
ls
cd Utilities\ParsingTool\
start vs
cd cic database
dbmanager import-content
clear
exit
plugin add nu_plugin_gstat
gstat
cd nvim
gstat
plugin
plugin list
plugin use gstat
gstat
$nu.plugin-path
plugin add --plugin-config nu_plugin_gstat
plugin add 'C:\Program Files\nu\bin\nu_plugin_gstat'
plugin add 'C:\Program Files\nu\bin\nu_plugin_gstat.exe'
plugin add -path 'C:\Program Files\nu\bin\nu_plugin_gstat.exe' nu_plugin_gstat
plugin add --plugin-config 'C:\Program Files\nu\bin\nu_plugin_gstat.exe' nu_plugin_gstat
$env.NU_PLUGIN_DIRS
clear
plugin add ./nu_plugin_gstat
cd nu
ls
cd ..
cd Local\Programs\nu\
ls
cd bin
ls
plugin add ./nu_plugin_gstat
plugin add --plugin-config gstat.msgpacks nu_plugin_gstat
exit
cago install nu_plugin_gstat
cargo install nu_plugin_gstat
plugin add nu_plugin_gstat
gstat
cd nvim
gstat .
gstat -h
gstat
cd ..
gstat ./nvim/
clear
plugin list
plugin use gstat
clear
cd nvim
gstat 
plugin list
exit
gstat
plugin add --plugin-config gstat.msgpacks nu_plugin_gstat
plugin add --plugin-config gstat.msgpacks ./nu_plugin_gstat
plugin add nu_plugin_gstat
polars -h
polars concat-str -h
clear
inc
inc -
inc --
inc -h
clear
plugin list
clear
plugin use nu_plugin_gstat
plugin add -h
$env.NU_PLUGIN_DIRS
vim $env.
vim $env.path
vim $nu.env-path
cd $env.NU_PLUGIN_DIRS
$env.NU_PLUGIN_DIRS
cd $env.NU_PLUGIN_DIRS.0
explorer c:/users/bwilliams/appdata/roaming/nushell
exit
gstat
plugin use nu_plugin_gstat
plugin add -h
plugin add --plugin-config gstat.msgpacks ./nu_plugin_gstat
plugin add --plugin-config gstat.msgpacks nu_plugin_gstat
plugin add --plugin-config nu_plugin_gstat
plugin add nu_plugin_gstat
plugin use nu_plugin_gstat
$nu.plugin-path
$nu.default-config-dir
$nu.config-path
plugin use ~/.cargo/bin/nu_plugin_gstat
plugin use ~/.cargo/bin/nu_plugin_gstat.exe
plugin use ~/.cargo/bin/nu_plugin_gstat
plugin add ~/.cargo/bin/nu_plugin_gstat
cargo 
cargo --list
cargo version nu_plugin_gstat
cargo version --help
cargo nu_plugin_gstat
cargo search cargo-no_plugin_gstat
clear
cargo 
cargo rm nu_plugin_gstat
cd .cargo
cd ~/.cargo
ls
ls bin
cd d:/
exit
plugin list
clear
cargo install nu_plugin_gstat
plugin list
clear
plugin add ~/.cargo/bin/nu_plugin_gstat
exit
plugin list
clear
plugin add ~/.cargo/bin/nu_plugin_gstat.exe
gstat
source $nu.config-path
gstat
plugin list
clear
plugin use ~/.cargo/bin/nu_plugin_gstat
plugin add ~/.cargo/bin/nu_plugin_gstat
plugin add ~/.cargo/bin/nu_plugin_gstat.exe
plugin list
plugin use ~/.cargo/bin/nu_plugin_gstat.exe
plugin list
gstat
cd nvim
gstat
cd cic database
gstat
plugin list
gstat
exit
cargo install nu_plugin_formats
plugin add ~/.cargo/bin/nu_plugin_formats.exe
plugin use ~/.cargo/bin/nu_plugin_formats.exe
plugin list
cargo install nu_plugin_polars
plugin add ~/.cargo/bin/nu_plugin_polars.exe; plugin use ~/.cargo/bin/nu_plugin_polars.exe
plugin add ~/.cargo/bin/nu_plugin_polars.exe
plugin use ~/.cargo/bin/nu_plugin_polars.exe
plugin list
cargo install nu_plugin_highlight
plugin add ~/.cargo/bin/nu_plugin_highlight.exe
plugin use ~/.cargo/bin/nu_plugin_highlight.exe
clear
plugin list
clear
cd nvim
ls
open init.lua | highlight
open init.lua | highlight lua
clear
cd $nu.config-path
vim $nu.env-path
registry query 
registry query -
registry query -h
clear
exit
registry query --hkcu environment | where name == Path | get value | split row ';'
clear
eixt
exit
refreshenv 
env update-php PHP8.2
$env.PATH
refreshenv 
$env.PATH
exit
$env.PATH
exit
vim $nu.config-path
$nu.data-dir
$nu.default-config-dir
cd $"($nu.default-config-dir)"
explorer .
exit
vim $nu.env-path
clear
vim $nu.config-path
cd $"($nu.default-config-dir)"
vim .
exit
cd $"($nu.default-config-dir)"
vim .
nvim
exit
nvim .
exit
cd $"($nu.default-config-dir)"
vim .
nvim .
exit
cd nvim
git status 
cd $"($nu.default-config-dir)"
vim .
exit
clear
exit
cd $"($nu.default-config-dir)"
vim .
exit
cd $"($nu.default-config-dir)"
source $nu.config-path
clear
exit
clear
source $nu.config-path
exit
clear
exit
nu-complete list themes
exit
rm -h
exit
ls
exit
ls
exit
ls
clear
exit
cd commsys
clear
exit
direnv
clear
exit
cd nvim-data
ls
clea
clear
cd ../nvim-data
clear
explorer .
exit
let remote = "https://raw.githubusercontent.com/nushell/tree-sitter-nu/main/queries/nu/la"
let remote = "https://raw.githubusercontent.com/nushell/tree-sitter-nu/main/queries/nu/"<\n>
let local = (<\n> $env.XDG_DATA_HOME?<\n> | default ($env.LOCALAPPDATA | path join "nvim-data")<\n> | path join "lazy" "nvim-treesitter" "queries" "nu"<\n>)
$local
let file = "highlights.scm"
mkdir $local
http get ([$remote $file] | str join "/") | save --force ($local | path join $file)
cd $local
clear
exit
vim .
clear
vim .
cd ..
ls
cd nushell
clear
cd appdata
ls
cd nushell
clear
git init 
git remote add https://github.com/justbarnt/nushell-config.git 
git remote add origin https://github.com/justbarnt/nushell-config.git 
git fetch origin
git pull
git branch --set-upstream-to remotes/origin/main
git fetch origin
git pull origin
git pull origin main
ls
git st
gtat
gstat
clear
git st
